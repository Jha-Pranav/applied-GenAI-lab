# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/buddy/backend/tools/core/manager.ipynb.

# %% auto 0
__all__ = ['ToolManager']

# %% ../../nbs/buddy/backend/tools/core/manager.ipynb 1
from typing import Dict, List, Any, Optional
import importlib
import inspect

from .base import BaseTool
from .registry import ToolRegistry
from .fs_read import FsReadTool
from .fs_write import FsWriteTool
from .execute_bash import ExecuteBashTool
from .code_interpreter import CodeInterpreterTool
from .code_quality import CodeQualityTool
from .introspect import IntrospectTool
from .debate_agent import DebateAgentTool
from .memory import MemoryManagerTool
from .task_planner import TaskPlannerTool
from .task_executor import TaskExecutorTool
from .task_monitor import TaskMonitorTool
from .doc_generator import DocGeneratorTool

# %% ../../nbs/buddy/backend/tools/core/manager.ipynb 2
class ToolManager:
    """Enhanced tool manager"""
    
    def __init__(self):
        self.registry = ToolRegistry()
        self._register_default_tools()
    
    def _register_default_tools(self):
        """Register all default tools"""
        default_tools = [
            # Filesystem tools
            FsReadTool(),
            FsWriteTool(),
            
            # System tools
            # ExecuteBashTool(),
            
            # Analysis tools
            CodeInterpreterTool(),
            CodeQualityTool(),
            
            # Intelligence tools
            IntrospectTool(),
            DebateAgentTool(),
            MemoryTool(),
            
            # Planning tools
            TaskPlannerTool(),
            TaskExecutorTool(),
            TaskMonitorTool(),

            
            # Utility tools
            DocGeneratorTool(),
        ]
        
        for tool in default_tools:
            self.registry.register_tool(tool)
    
    def get_tools(self, tool_names: Optional[List[str]] = None) -> List[Dict[str, Any]]:
        """Get OpenAI-formatted tools"""
        return self.registry.get_openai_schemas(tool_names)
    
    def execute_tool(self, tool_name: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Execute a tool by name"""
        return self.registry.execute_tool(tool_name, parameters)
    
    def list_tools(self) -> List[str]:
        """List all available tool names"""
        return self.registry.list_tools()
    
    def get_tool_info(self, tool_name: str) -> Optional[Dict[str, Any]]:
        """Get information about a specific tool"""
        return self.registry.get_tool_info(tool_name)
    
    def register_custom_tool(self, tool: BaseTool):
        """Register a custom tool"""
        self.registry.register_tool(tool)
    
    def unregister_tool(self, tool_name: str):
        """Unregister a tool"""
        self.registry.unregister_tool(tool_name)

