# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/buddy/backend/tools/core/manager.ipynb.

# %% auto 0
__all__ = ['ToolManager']

# %% ../../nbs/buddy/backend/tools/core/manager.ipynb 1
from typing import Dict, List, Any, Optional

from .base import BaseTool
from .registry import ToolRegistry
from .fs_read import FsReadTool
from .fs_write import FsWriteTool
from .execute_bash import ExecuteBashTool
from .code_interpreter import CodeInterpreterTool
from .debate import DebateTool
from .planner import PlannerTool
from .mcp_tools import MCPToolFactory

class ToolManager:
    """Enhanced tool manager with MCP support"""
    
    def __init__(self):
        self.registry = ToolRegistry()
        self._register_default_tools()
    
    def _register_default_tools(self):
        """Register all default tools"""
        default_tools = [
            # Filesystem tools
            # FsReadTool(),
            # FsWriteTool(),
            
            # # System tools
            # ExecuteBashTool(),
            
            # # Analysis tools
            # CodeInterpreterTool(),
            
            # # Intelligence tools
            # DebateTool(),
            
            # # Planning tools
            # PlannerTool()
        ]
        
        # Add all MCP tools from config
        mcp_tools = MCPToolFactory.load_mcp_tools_from_config()
        default_tools.extend(mcp_tools)
        
        for tool in default_tools:
            self.registry.register_tool(tool)
    
    def add_mcp_server(self, name: str, command: List[str], args: List[str] = None):
        """Add an MCP server"""
        self.mcp_manager.add_server(name, command, args)
    
    def execute_mcp_tool(self, server_name: str, tool_name: str, **kwargs) -> str:
        """Execute an MCP tool"""
        mcp_tool = self.mcp_manager.get_tool(server_name)
        if mcp_tool:
            return mcp_tool.execute(tool_name, **kwargs)
        return f"MCP server '{server_name}' not found"
    
    def get_tools(self, tool_names: Optional[List[str]] = None) -> List[Dict[str, Any]]:
        """Get OpenAI-formatted tools"""
        return self.registry.get_openai_schemas(tool_names)
    
    def execute_tool(self, tool_name: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
        """Execute a tool by name"""
        return self.registry.execute_tool(tool_name, parameters)
    
    def list_tools(self) -> List[str]:
        """List all available tool names"""
        return self.registry.list_tools()
    
    def get_tool_info(self, tool_name: str) -> Optional[Dict[str, Any]]:
        """Get information about a specific tool"""
        return self.registry.get_tool_info(tool_name)
    
    def register_custom_tool(self, tool: BaseTool):
        """Register a custom tool"""
        self.registry.register_tool(tool)
    
    def unregister_tool(self, tool_name: str):
        """Unregister a tool"""
        self.registry.unregister_tool(tool_name)



