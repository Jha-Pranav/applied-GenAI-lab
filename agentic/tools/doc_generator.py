# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/buddy/backend/tools/utilities/doc_generator.ipynb.

# %% auto 0
__all__ = ['DocGeneratorTool']

# %% ../../nbs/buddy/backend/tools/utilities/doc_generator.ipynb 1
from .base import BaseTool
from ..schemas import DocumentationGeneratorParams
from pathlib import Path
from typing import Dict, Any

class DocGeneratorTool(BaseTool):
    def get_parameters_schema(self) -> Dict[str, Any]:
        """Return the OpenAI-compatible schema for doc_generator."""
        return {
                "type": "function",
                "function": {
                    "name": "doc_generator",
                    "description": "Intelligent documentation generator that analyzes entire repositories and creates comprehensive usage documentation.",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "repo_path": {"type": "string", "description": "Repository root path"},
                            "doc_type": {
                                "type": "string",
                                "enum": ["api", "usage", "architecture", "setup", "comprehensive"],
                                "description": "Type of documentation to generate"
                            },
                            "output_format": {"type": "string", "enum": ["markdown", "html", "rst"], "description": "Output format"},
                            "include_examples": {"type": "boolean", "description": "Include code examples"},
                            "include_diagrams": {"type": "boolean", "description": "Generate architecture diagrams"},
                            "target_audience": {"type": "string", "enum": ["developers", "users", "contributors"], "description": "Target audience"},
                            "output_path": {"type": "string", "description": "Output directory for documentation"}
                        },
                        "required": ["repo_path", "doc_type"]
                    }
                }
            }

    def execute(self, **kwargs) -> Dict[str, Any]:
        """Generate documentation for a repository."""
        try:
            params = DocumentationGeneratorParams(**kwargs)
            repo_path = Path(params.repo_path)
            
            if not repo_path.exists() or not repo_path.is_dir():
                return {"error": f"Invalid repository path: {params.repo_path}"}
            
            output_path = Path(params.output_path)
            output_path.mkdir(parents=True, exist_ok=True)
            
            # Simplified documentation generation (replace with actual doc generation logic)
            doc_content = f"# {params.doc_type.capitalize()} Documentation\n\nGenerated for {params.repo_path}\n"
            if params.include_examples:
                doc_content += "## Examples\nPlaceholder example content\n"
            if params.include_diagrams:
                doc_content += "## Diagrams\nPlaceholder diagram content\n"
            
            output_file = output_path / f"docs.{params.output_format}"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(doc_content)
            
            return {
                "success": True,
                "output_path": str(output_file),
                "doc_type": params.doc_type,
                "format": params.output_format,
                "message": f"Generated {params.doc_type} documentation in {params.output_format}"
            }
            
        except Exception as e:
            return {"error": f"Documentation generation failed: {str(e)}"}
