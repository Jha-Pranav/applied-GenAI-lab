# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/buddy/backend/tools/intelligence/debate_agent.ipynb.

# %% auto 0
__all__ = ['DebateAgentTool']

# %% ../../nbs/buddy/backend/tools/intelligence/debate_agent.ipynb 1
from typing import Dict, Any
import asyncio
from .base import BaseTool, ToolMetadata, ToolCategory

class DebateAgentTool(BaseTool):
    """Multi-perspective analysis and structured debate tool"""
    
    def __init__(self):
        super().__init__(
            metadata=ToolMetadata(
                name="debate_agent",
                description="Multi-perspective analysis and structured debate for complex decisions",
                category=ToolCategory.INTELLIGENCE
            )
        )
    
    def get_parameters_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "topic": {
                    "type": "string",
                    "description": "Decision or topic to debate"
                },
                "context": {
                    "type": "string", 
                    "description": "Background context for the debate"
                },
                "perspectives": {
                    "type": "array",
                    "items": {"type": "string"},
                    "description": "Specific perspectives to consider (optional)"
                }
            },
            "required": ["topic", "context"]
        }
    
    def execute(self, **kwargs) -> Dict[str, Any]:
        """Execute debate analysis"""
        try:
            topic = kwargs.get("topic", "")
            context = kwargs.get("context", "")
            
            if not topic or not context:
                return {"error": "Topic and context are required"}
            
            # Import and run debate
            from agentic.agent.debater import create_debate
            result = asyncio.run(create_debate(topic=topic, context=context))
            
            return {"success": True, "result": result}
            
        except Exception as e:
            return {"error": f"Debate execution failed: {str(e)}"}

