# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/buddy/backend/tools/planner/task_planner.ipynb.

# %% auto 0
__all__ = ['TaskPlannerTool']

# %% ../../nbs/buddy/backend/tools/planner/task_planner.ipynb 1
from typing import Dict, Any
import asyncio
from .base import BaseTool, ToolMetadata, ToolCategory

class TaskPlannerTool(BaseTool):
    """Intelligent task analysis and execution planning tool"""
    
    def __init__(self):
        super().__init__(
            metadata=ToolMetadata(
                name="task_planner",
                description="Intelligent task analysis and execution planning for complex requests",
                category=ToolCategory.INTELLIGENCE
            )
        )
    
    def get_parameters_schema(self) -> Dict[str, Any]:
        return {
            "type": "object",
            "properties": {
                "request": {
                    "type": "string",
                    "description": "Complete user request to analyze and plan"
                },
                "complexity": {
                    "type": "string",
                    "description": "Estimated complexity level (optional)"
                }
            },
            "required": ["request"]
        }
    
    def execute(self, **kwargs) -> Dict[str, Any]:
        """Execute task planning"""
        try:
            request = kwargs.get("request", "")
            
            if not request:
                return {"error": "Request is required"}
            
            # Import and run planner
            from ..agent.planner.main import main as planner_main
            result = asyncio.run(planner_main(request))
            
            return {"success": True, "result": result}
            
        except Exception as e:
            return {"error": f"Planning execution failed: {str(e)}"}

